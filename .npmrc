# Repository-level npm configuration tuned for CI (AWS Amplify) and local development.
# Do NOT commit secrets to source control. Use Amplify Console environment variables or
# your CI provider's secret store to supply tokens.

# Allow running install scripts as root in some CI environments (Amplify runs as root)
unsafe-perm=true

# Prefer newer lockfile formats but allow older clients to install
save-exact=true

# Reduce telemetry noise in CI
fund=false

# If you're using a private registry (npm, GitHub Packages, or others), configure auth
# via environment variables. Examples:
# 1) npm registry token (for npmjs.org): set NPM_TOKEN in Amplify Console env and
#    uncomment the line below in the Amplify build step or create a secret in the
#    Console that writes to ~/.npmrc at build time. Do NOT hardcode tokens here.
#
# //registry.npmjs.org/:_authToken=${NPM_TOKEN}
#
# 2) GitHub Packages (replace OWNER with your org/user and optionally the registry URL):
#
# //npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}
# @OWNER:registry=https://npm.pkg.github.com
#
# 3) Scoped registries (example for @my-org scope):
#
# @my-org:registry=https://registry.npmjs.org/
# //registry.npmjs.org/:_authToken=${NPM_TOKEN}

# If you use pnpm in CI, you might want to disable strict-peer-deps there instead
# of modifying npm behavior. This file focuses on npm/yarn behavior for Amplify.

# pnpm: Amplify recommends using the hoisted node linker for monorepos.
# This setting is read by pnpm (when pnpm reads .npmrc) and ensures a more
# compatible layout for CI/build systems like Amplify. Keep it commented if
# you don't use pnpm or if you prefer the default node-modules layout.
# See: https://docs.aws.amazon.com/amplify/latest/userguide/monorepo-configuration.html
#
node-linker=hoisted

# End of file
