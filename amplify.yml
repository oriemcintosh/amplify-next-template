version: 1
backend:
  phases:
    preBuild:
      commands:
        # Prepare pnpm in the backend build environment too
        - corepack enable || true
        - corepack prepare pnpm@latest --activate || true
        # If corepack/pnpm is not available, install pnpm globally as a fallback
        - |
          if ! command -v pnpm >/dev/null 2>&1; then
            echo "pnpm not found via corepack — installing pnpm globally"
            npm i -g pnpm@latest
          fi
        # Inject runtime ~/.npmrc from Amplify env vars if tokens present
        - |
          if [ -n "$NPM_TOKEN" ]; then
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          fi
        - |
          if [ -n "$GITHUB_TOKEN" ]; then
            echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" > ~/.npmrc
          fi
    build:
      commands:
        # Install backend dependencies with pnpm to match frontend workflow
        - pnpm install --frozen-lockfile || npm ci --cache .npm --prefer-offline
        - npx ampx pipeline-deploy --branch $AWS_BRANCH --app-id $AWS_APP_ID
frontend:
  phases:
    preBuild:
      commands:
        # Enable corepack and prepare pnpm for the build environment
        - corepack enable || true
        - corepack prepare pnpm@latest --activate || true
        # If corepack/pnpm is not available, install pnpm globally as a fallback
        - |
          if ! command -v pnpm >/dev/null 2>&1; then
            echo "pnpm not found via corepack — installing pnpm globally"
            npm i -g pnpm@latest
          fi
        # If you use a private registry, write runtime ~/.npmrc from Amplify env vars.
        # Set NPM_TOKEN or GITHUB_TOKEN in Amplify Console > App settings > Environment variables.
        - |
          if [ -n "$NPM_TOKEN" ]; then
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          fi
        - |
          if [ -n "$GITHUB_TOKEN" ]; then
            echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" > ~/.npmrc
            # Optionally map a scope to GitHub Packages; replace OWNER with your org/user
            # echo "@OWNER:registry=https://npm.pkg.github.com" >> ~/.npmrc
          fi
        - pnpm -v
    build:
      commands:
        # Use pnpm to install using the repository .npmrc and the runtime ~/.npmrc
        - pnpm install --frozen-lockfile
        # Build the Next.js app in the 'app' package (adjust if your package name/path differs)
        - pnpm --filter ./app... run build
  artifacts:
    baseDirectory: .next
    files:
      - '**/*'
  cache:
    paths:
      - .next/cache/**/*
      - .npm/**/*
      - node_modules/**/*